{"ast":null,"code":"import React, { createContext, useReducer, useContext, useEffect } from 'react';\nimport { makeAutoObservable } from \"mobx\";\nclass CartStore {\n  // Tableau pour stocker les articles du panier\n\n  constructor() {\n    this.cart = [];\n    makeAutoObservable(this);\n  }\n  addToCart(article) {\n    // Vérifiez d'abord si l'article est déjà dans le panier\n    const existingCartItem = this.cart.find(item => item.id === article.id);\n    const test = this.existInCart(article.id);\n    if (this.existInCart(article)) {\n      // Si l'article existe déjà dans le panier, on augmente sa quantité\n      existingCartItem.quantity += 1;\n    } else {\n      // Sinon on l'ajoute avec une quantité de 1\n      this.cart.push({\n        ...article,\n        quantity: 1\n      });\n    }\n  }\n  removeFromCart(productId) {\n    // Votre logique pour retirer un produit du panier\n    // Par exemple, vous pouvez utiliser filter pour supprimer l'article\n    this.cart = this.cart.filter(item => item.productId !== productId);\n\n    // Recherchez l'index de l'article à supprimer dans le panier\n    const index = this.cart.findIndex(item => item.id === articleId);\n    if (index !== -1) {\n      // Si l'article existe dans le panier, supprimez-le\n      this.cart.splice(index, 1);\n    }\n  }\n  existInCart(article) {\n    if (this.cart.find(item => item.id === articleId)) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n  getQuantity(productId) {\n    // Votre logique pour obtenir la quantité d'un produit dans le panier\n    // Par exemple, vous pouvez utiliser reduce pour compter les occurrences\n    return this.cart.reduce((count, item) => {\n      if (item.productId === productId) {\n        return count + 1;\n      }\n      return count;\n    }, 0);\n  }\n\n  // D'autres méthodes ou propriétés du panier si nécessaire\n}\n\nconst cartStore = new CartStore();\nexport default cartStore;","map":{"version":3,"names":["React","createContext","useReducer","useContext","useEffect","makeAutoObservable","CartStore","constructor","cart","addToCart","article","existingCartItem","find","item","id","test","existInCart","quantity","push","removeFromCart","productId","filter","index","findIndex","articleId","splice","getQuantity","reduce","count","cartStore"],"sources":["C:/Nina/Scolarite/Matane/ProjetMultimedia/Borne/PM4-TP2/appreact/src/store/CartStore.js"],"sourcesContent":["import React, { createContext, useReducer, useContext, useEffect } from 'react';\r\nimport { makeAutoObservable } from \"mobx\";\r\n\r\nclass CartStore {\r\n  cart = []; // Tableau pour stocker les articles du panier\r\n\r\n  constructor() {\r\n    makeAutoObservable(this);\r\n  }\r\n\r\n  addToCart(article) {\r\n      // Vérifiez d'abord si l'article est déjà dans le panier\r\n      const existingCartItem = this.cart.find((item) => item.id === article.id);\r\n\r\n      const test = this.existInCart(article.id)\r\n\r\n      if (this.existInCart(article)) {\r\n        // Si l'article existe déjà dans le panier, on augmente sa quantité\r\n        existingCartItem.quantity += 1;\r\n      } else {\r\n        // Sinon on l'ajoute avec une quantité de 1\r\n        this.cart.push({ ...article, quantity: 1 });\r\n      }\r\n  }\r\n\r\n  \r\n  removeFromCart(productId) {\r\n    // Votre logique pour retirer un produit du panier\r\n    // Par exemple, vous pouvez utiliser filter pour supprimer l'article\r\n    this.cart = this.cart.filter(item => item.productId !== productId);\r\n\r\n\r\n      // Recherchez l'index de l'article à supprimer dans le panier\r\n      const index = this.cart.findIndex((item) => item.id === articleId);\r\n\r\n      if (index !== -1) {\r\n        // Si l'article existe dans le panier, supprimez-le\r\n        this.cart.splice(index, 1);\r\n      }\r\n  }\r\n\r\n  existInCart(article) {\r\n    if (this.cart.find((item) => item.id === articleId)) {\r\n        return true\r\n    } else {\r\n        return false\r\n    }\r\n}\r\n\r\n  getQuantity(productId) {\r\n    // Votre logique pour obtenir la quantité d'un produit dans le panier\r\n    // Par exemple, vous pouvez utiliser reduce pour compter les occurrences\r\n    return this.cart.reduce((count, item) => {\r\n      if (item.productId === productId) {\r\n        return count + 1;\r\n      }\r\n      return count;\r\n    }, 0);\r\n  }\r\n\r\n  // D'autres méthodes ou propriétés du panier si nécessaire\r\n}\r\n\r\nconst cartStore = new CartStore();\r\n\r\nexport default cartStore;\r\n"],"mappings":"AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,UAAU,EAAEC,SAAS,QAAQ,OAAO;AAC/E,SAASC,kBAAkB,QAAQ,MAAM;AAEzC,MAAMC,SAAS,CAAC;EACH;;EAEXC,WAAWA,CAAA,EAAG;IAAA,KAFdC,IAAI,GAAG,EAAE;IAGPH,kBAAkB,CAAC,IAAI,CAAC;EAC1B;EAEAI,SAASA,CAACC,OAAO,EAAE;IACf;IACA,MAAMC,gBAAgB,GAAG,IAAI,CAACH,IAAI,CAACI,IAAI,CAAEC,IAAI,IAAKA,IAAI,CAACC,EAAE,KAAKJ,OAAO,CAACI,EAAE,CAAC;IAEzE,MAAMC,IAAI,GAAG,IAAI,CAACC,WAAW,CAACN,OAAO,CAACI,EAAE,CAAC;IAEzC,IAAI,IAAI,CAACE,WAAW,CAACN,OAAO,CAAC,EAAE;MAC7B;MACAC,gBAAgB,CAACM,QAAQ,IAAI,CAAC;IAChC,CAAC,MAAM;MACL;MACA,IAAI,CAACT,IAAI,CAACU,IAAI,CAAC;QAAE,GAAGR,OAAO;QAAEO,QAAQ,EAAE;MAAE,CAAC,CAAC;IAC7C;EACJ;EAGAE,cAAcA,CAACC,SAAS,EAAE;IACxB;IACA;IACA,IAAI,CAACZ,IAAI,GAAG,IAAI,CAACA,IAAI,CAACa,MAAM,CAACR,IAAI,IAAIA,IAAI,CAACO,SAAS,KAAKA,SAAS,CAAC;;IAGhE;IACA,MAAME,KAAK,GAAG,IAAI,CAACd,IAAI,CAACe,SAAS,CAAEV,IAAI,IAAKA,IAAI,CAACC,EAAE,KAAKU,SAAS,CAAC;IAElE,IAAIF,KAAK,KAAK,CAAC,CAAC,EAAE;MAChB;MACA,IAAI,CAACd,IAAI,CAACiB,MAAM,CAACH,KAAK,EAAE,CAAC,CAAC;IAC5B;EACJ;EAEAN,WAAWA,CAACN,OAAO,EAAE;IACnB,IAAI,IAAI,CAACF,IAAI,CAACI,IAAI,CAAEC,IAAI,IAAKA,IAAI,CAACC,EAAE,KAAKU,SAAS,CAAC,EAAE;MACjD,OAAO,IAAI;IACf,CAAC,MAAM;MACH,OAAO,KAAK;IAChB;EACJ;EAEEE,WAAWA,CAACN,SAAS,EAAE;IACrB;IACA;IACA,OAAO,IAAI,CAACZ,IAAI,CAACmB,MAAM,CAAC,CAACC,KAAK,EAAEf,IAAI,KAAK;MACvC,IAAIA,IAAI,CAACO,SAAS,KAAKA,SAAS,EAAE;QAChC,OAAOQ,KAAK,GAAG,CAAC;MAClB;MACA,OAAOA,KAAK;IACd,CAAC,EAAE,CAAC,CAAC;EACP;;EAEA;AACF;;AAEA,MAAMC,SAAS,GAAG,IAAIvB,SAAS,CAAC,CAAC;AAEjC,eAAeuB,SAAS"},"metadata":{},"sourceType":"module","externalDependencies":[]}