{"ast":null,"code":"import React, { createContext, useReducer, useContext, useEffect } from 'react';\nimport { makeAutoObservable } from \"mobx\";\nclass CartStore {\n  // Tableau pour stocker les articles du panier\n\n  constructor() {\n    this.cart = [];\n    makeAutoObservable(this);\n  }\n  addToCart(article) {\n    const currentArticle = this.existInCart(article.id);\n    if (currentArticle) {\n      // Si l'article existe déjà dans le panier, on augmente sa quantité\n      currentArticle.quantity += 1;\n    } else {\n      // Sinon on l'ajoute avec une quantité de 1\n      this.cart.push({\n        ...article,\n        quantity: 1\n      });\n    }\n  }\n  removeFromCart(article) {\n    const currentArticle = this.existInCart(article.id);\n    if (currentArticle) {\n      // Si l'article existe déjà dans le panier, on diminue sa quantité\n      currentArticle.quantity -= 1;\n      //const index = this.cart.findIndex((item) => item.id === article.id);\n      //this.cart.splice(index, 1);\n    }\n  }\n\n  updateCartItemQuantity(article, newQuantity) {\n    const currentArticle = this.existInCart(article.id);\n    if (currentArticle) {\n      // Mettre à jour la quantité de l'article dans le panier\n      currentArticle.quantity = newQuantity;\n    }\n  }\n  existInCart(articleId) {\n    // Vérifiez si l'article est déjà dans le panier\n    const currentArticle = this.cart.find(item => item.id === articleId);\n    if (currentArticle) {\n      return currentArticle;\n    } else {\n      return false;\n    }\n  }\n  getQuantity(productId) {\n    const currentArticle = this.existInCart(productId);\n    if (currentArticle) {\n      return currentArticle.quantity;\n    }\n\n    // Si l'article n'est pas trouvé, on retourne 0\n    return 0;\n  }\n}\nexport default CartStore;","map":{"version":3,"names":["React","createContext","useReducer","useContext","useEffect","makeAutoObservable","CartStore","constructor","cart","addToCart","article","currentArticle","existInCart","id","quantity","push","removeFromCart","updateCartItemQuantity","newQuantity","articleId","find","item","getQuantity","productId"],"sources":["C:/Nina/Scolarite/Matane/ProjetMultimedia/Borne/PM4-TP2/appreact/src/store/CartStore.js"],"sourcesContent":["import React, {\r\n    createContext,\r\n    useReducer,\r\n    useContext,\r\n    useEffect\r\n} from 'react';\r\nimport {\r\n    makeAutoObservable\r\n} from \"mobx\";\r\n\r\nclass CartStore {\r\n    cart = []; // Tableau pour stocker les articles du panier\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    addToCart(article) {\r\n        const currentArticle = this.existInCart(article.id);\r\n\r\n        if (currentArticle) {\r\n            // Si l'article existe déjà dans le panier, on augmente sa quantité\r\n            currentArticle.quantity += 1;\r\n        } else {\r\n            // Sinon on l'ajoute avec une quantité de 1\r\n            this.cart.push({\r\n                ...article,\r\n                quantity: 1\r\n            });\r\n        }\r\n    }\r\n\r\n\r\n    removeFromCart(article) {\r\n\r\n        const currentArticle = this.existInCart(article.id);\r\n\r\n        if (currentArticle) {\r\n            // Si l'article existe déjà dans le panier, on diminue sa quantité\r\n            currentArticle.quantity -= 1;\r\n            //const index = this.cart.findIndex((item) => item.id === article.id);\r\n            //this.cart.splice(index, 1);\r\n\r\n        }\r\n    }\r\n\r\n    updateCartItemQuantity(article, newQuantity) {\r\n        const currentArticle = this.existInCart(article.id);\r\n    \r\n        if (currentArticle) {\r\n          // Mettre à jour la quantité de l'article dans le panier\r\n          currentArticle.quantity = newQuantity;\r\n        }\r\n      }\r\n\r\n    existInCart(articleId) {\r\n        // Vérifiez si l'article est déjà dans le panier\r\n        const currentArticle = this.cart.find((item) => item.id === articleId);\r\n        if (currentArticle) {\r\n            return currentArticle;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    getQuantity(productId) {\r\n        const currentArticle = this.existInCart(productId);\r\n        if (currentArticle) {\r\n            return currentArticle.quantity;\r\n          }\r\n        \r\n          // Si l'article n'est pas trouvé, on retourne 0\r\n          return 0;\r\n    }\r\n}\r\n\r\nexport default CartStore;"],"mappings":"AAAA,OAAOA,KAAK,IACRC,aAAa,EACbC,UAAU,EACVC,UAAU,EACVC,SAAS,QACN,OAAO;AACd,SACIC,kBAAkB,QACf,MAAM;AAEb,MAAMC,SAAS,CAAC;EACD;;EAEXC,WAAWA,CAAA,EAAG;IAAA,KAFdC,IAAI,GAAG,EAAE;IAGLH,kBAAkB,CAAC,IAAI,CAAC;EAC5B;EAEAI,SAASA,CAACC,OAAO,EAAE;IACf,MAAMC,cAAc,GAAG,IAAI,CAACC,WAAW,CAACF,OAAO,CAACG,EAAE,CAAC;IAEnD,IAAIF,cAAc,EAAE;MAChB;MACAA,cAAc,CAACG,QAAQ,IAAI,CAAC;IAChC,CAAC,MAAM;MACH;MACA,IAAI,CAACN,IAAI,CAACO,IAAI,CAAC;QACX,GAAGL,OAAO;QACVI,QAAQ,EAAE;MACd,CAAC,CAAC;IACN;EACJ;EAGAE,cAAcA,CAACN,OAAO,EAAE;IAEpB,MAAMC,cAAc,GAAG,IAAI,CAACC,WAAW,CAACF,OAAO,CAACG,EAAE,CAAC;IAEnD,IAAIF,cAAc,EAAE;MAChB;MACAA,cAAc,CAACG,QAAQ,IAAI,CAAC;MAC5B;MACA;IAEJ;EACJ;;EAEAG,sBAAsBA,CAACP,OAAO,EAAEQ,WAAW,EAAE;IACzC,MAAMP,cAAc,GAAG,IAAI,CAACC,WAAW,CAACF,OAAO,CAACG,EAAE,CAAC;IAEnD,IAAIF,cAAc,EAAE;MAClB;MACAA,cAAc,CAACG,QAAQ,GAAGI,WAAW;IACvC;EACF;EAEFN,WAAWA,CAACO,SAAS,EAAE;IACnB;IACA,MAAMR,cAAc,GAAG,IAAI,CAACH,IAAI,CAACY,IAAI,CAAEC,IAAI,IAAKA,IAAI,CAACR,EAAE,KAAKM,SAAS,CAAC;IACtE,IAAIR,cAAc,EAAE;MAChB,OAAOA,cAAc;IACzB,CAAC,MAAM;MACH,OAAO,KAAK;IAChB;EACJ;EAEAW,WAAWA,CAACC,SAAS,EAAE;IACnB,MAAMZ,cAAc,GAAG,IAAI,CAACC,WAAW,CAACW,SAAS,CAAC;IAClD,IAAIZ,cAAc,EAAE;MAChB,OAAOA,cAAc,CAACG,QAAQ;IAChC;;IAEA;IACA,OAAO,CAAC;EACd;AACJ;AAEA,eAAeR,SAAS"},"metadata":{},"sourceType":"module","externalDependencies":[]}