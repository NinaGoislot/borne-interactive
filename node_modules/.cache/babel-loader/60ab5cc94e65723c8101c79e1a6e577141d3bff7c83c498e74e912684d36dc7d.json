{"ast":null,"code":"// CartStore.js\nimport { makeAutoObservable } from \"mobx\";\nclass CartStore {\n  // Tableau pour stocker les articles du panier\n\n  constructor() {\n    this.cart = [];\n    makeAutoObservable(this);\n  }\n  addToCart(product) {\n    // Votre logique pour ajouter un produit au panier\n    // Vous pouvez ajouter des vérifications, des mises à jour, etc.\n    this.cart.push(product);\n  }\n  removeFromCart(productId) {\n    // Votre logique pour retirer un produit du panier\n    // Par exemple, vous pouvez utiliser filter pour supprimer l'article\n    this.cart = this.cart.filter(item => item.productId !== productId);\n  }\n  getQuantity(productId) {\n    // Votre logique pour obtenir la quantité d'un produit dans le panier\n    // Par exemple, vous pouvez utiliser reduce pour compter les occurrences\n    return this.cart.reduce((count, item) => {\n      if (item.productId === productId) {\n        return count + 1;\n      }\n      return count;\n    }, 0);\n  }\n\n  // D'autres méthodes ou propriétés du panier si nécessaire\n}\n\nconst cartStore = new CartStore();\nexport default cartStore;","map":{"version":3,"names":["makeAutoObservable","CartStore","constructor","cart","addToCart","product","push","removeFromCart","productId","filter","item","getQuantity","reduce","count","cartStore"],"sources":["C:/Nina/Scolarite/Matane/ProjetMultimedia/Borne/PM4-TP2/appreact/src/store/CartStore.js"],"sourcesContent":["// CartStore.js\r\nimport { makeAutoObservable } from \"mobx\";\r\n\r\nclass CartStore {\r\n  cart = []; // Tableau pour stocker les articles du panier\r\n\r\n  constructor() {\r\n    makeAutoObservable(this);\r\n  }\r\n\r\n  addToCart(product) {\r\n    // Votre logique pour ajouter un produit au panier\r\n    // Vous pouvez ajouter des vérifications, des mises à jour, etc.\r\n    this.cart.push(product);\r\n  }\r\n\r\n  removeFromCart(productId) {\r\n    // Votre logique pour retirer un produit du panier\r\n    // Par exemple, vous pouvez utiliser filter pour supprimer l'article\r\n    this.cart = this.cart.filter(item => item.productId !== productId);\r\n  }\r\n\r\n  getQuantity(productId) {\r\n    // Votre logique pour obtenir la quantité d'un produit dans le panier\r\n    // Par exemple, vous pouvez utiliser reduce pour compter les occurrences\r\n    return this.cart.reduce((count, item) => {\r\n      if (item.productId === productId) {\r\n        return count + 1;\r\n      }\r\n      return count;\r\n    }, 0);\r\n  }\r\n\r\n  // D'autres méthodes ou propriétés du panier si nécessaire\r\n}\r\n\r\nconst cartStore = new CartStore();\r\n\r\nexport default cartStore;\r\n"],"mappings":"AAAA;AACA,SAASA,kBAAkB,QAAQ,MAAM;AAEzC,MAAMC,SAAS,CAAC;EACH;;EAEXC,WAAWA,CAAA,EAAG;IAAA,KAFdC,IAAI,GAAG,EAAE;IAGPH,kBAAkB,CAAC,IAAI,CAAC;EAC1B;EAEAI,SAASA,CAACC,OAAO,EAAE;IACjB;IACA;IACA,IAAI,CAACF,IAAI,CAACG,IAAI,CAACD,OAAO,CAAC;EACzB;EAEAE,cAAcA,CAACC,SAAS,EAAE;IACxB;IACA;IACA,IAAI,CAACL,IAAI,GAAG,IAAI,CAACA,IAAI,CAACM,MAAM,CAACC,IAAI,IAAIA,IAAI,CAACF,SAAS,KAAKA,SAAS,CAAC;EACpE;EAEAG,WAAWA,CAACH,SAAS,EAAE;IACrB;IACA;IACA,OAAO,IAAI,CAACL,IAAI,CAACS,MAAM,CAAC,CAACC,KAAK,EAAEH,IAAI,KAAK;MACvC,IAAIA,IAAI,CAACF,SAAS,KAAKA,SAAS,EAAE;QAChC,OAAOK,KAAK,GAAG,CAAC;MAClB;MACA,OAAOA,KAAK;IACd,CAAC,EAAE,CAAC,CAAC;EACP;;EAEA;AACF;;AAEA,MAAMC,SAAS,GAAG,IAAIb,SAAS,CAAC,CAAC;AAEjC,eAAea,SAAS"},"metadata":{},"sourceType":"module","externalDependencies":[]}