{"ast":null,"code":"import React, { createContext, useReducer, useContext, useEffect } from 'react';\nimport { makeAutoObservable } from \"mobx\";\nclass CartStore {\n  // Tableau pour stocker les articles du panier\n\n  constructor() {\n    this.cart = [];\n    makeAutoObservable(this);\n  }\n  addToCart(article) {\n    const currentArticle = this.existInCart(article.id);\n    if (currentArticle) {\n      // Si l'article existe déjà dans le panier, on augmente sa quantité\n      currentArticle.quantity += 1;\n    } else {\n      // Sinon on l'ajoute avec une quantité de 1\n      this.cart.push({\n        ...article,\n        quantity: 1\n      });\n    }\n  }\n  removeFromCart(article) {\n    if (this.existInCart(article.id)) {\n      // Si l'article existe déjà dans le panier, on augmente sa quantité\n      existingCartItem.quantity -= 1;\n      const index = this.cart.findIndex(item => item.id === articleId);\n      this.cart.splice(index, 1);\n    }\n  }\n  existInCart(articleId) {\n    // Vérifiez si l'article est déjà dans le panier\n    const currentArticle = this.cart.find(item => item.id === articleId);\n    if (currentArticle) {\n      return currentArticle;\n    } else {\n      return false;\n    }\n  }\n  getQuantity(productId) {\n    // Votre logique pour obtenir la quantité d'un produit dans le panier\n    // Par exemple, vous pouvez utiliser reduce pour compter les occurrences\n    return this.cart.reduce((count, item) => {\n      if (item.productId === productId) {\n        return count + 1;\n      }\n      return count;\n    }, 0);\n  }\n\n  // D'autres méthodes ou propriétés du panier si nécessaire\n}\n\nconst cartStore = new CartStore();\nexport default cartStore;","map":{"version":3,"names":["React","createContext","useReducer","useContext","useEffect","makeAutoObservable","CartStore","constructor","cart","addToCart","article","currentArticle","existInCart","id","quantity","push","removeFromCart","existingCartItem","index","findIndex","item","articleId","splice","find","getQuantity","productId","reduce","count","cartStore"],"sources":["C:/Nina/Scolarite/Matane/ProjetMultimedia/Borne/PM4-TP2/appreact/src/store/CartStore.js"],"sourcesContent":["import React, {\r\n    createContext,\r\n    useReducer,\r\n    useContext,\r\n    useEffect\r\n} from 'react';\r\nimport {\r\n    makeAutoObservable\r\n} from \"mobx\";\r\n\r\nclass CartStore {\r\n    cart = []; // Tableau pour stocker les articles du panier\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    addToCart(article) {\r\n        const currentArticle = this.existInCart(article.id);\r\n\r\n        if (currentArticle) {\r\n            // Si l'article existe déjà dans le panier, on augmente sa quantité\r\n            currentArticle.quantity += 1;\r\n        } else {\r\n            // Sinon on l'ajoute avec une quantité de 1\r\n            this.cart.push({\r\n                ...article,\r\n                quantity: 1\r\n            });\r\n        }\r\n    }\r\n\r\n\r\n    removeFromCart(article) {\r\n\r\n        if (this.existInCart(article.id)) {\r\n            // Si l'article existe déjà dans le panier, on augmente sa quantité\r\n            existingCartItem.quantity -= 1;\r\n            const index = this.cart.findIndex((item) => item.id === articleId);\r\n            this.cart.splice(index, 1);\r\n        }\r\n    }\r\n\r\n    existInCart(articleId) {\r\n        // Vérifiez si l'article est déjà dans le panier\r\n        const currentArticle = this.cart.find((item) => item.id === articleId);\r\n        if (currentArticle) {\r\n            return currentArticle;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    getQuantity(productId) {\r\n        // Votre logique pour obtenir la quantité d'un produit dans le panier\r\n        // Par exemple, vous pouvez utiliser reduce pour compter les occurrences\r\n        return this.cart.reduce((count, item) => {\r\n            if (item.productId === productId) {\r\n                return count + 1;\r\n            }\r\n            return count;\r\n        }, 0);\r\n    }\r\n\r\n    // D'autres méthodes ou propriétés du panier si nécessaire\r\n}\r\n\r\nconst cartStore = new CartStore();\r\n\r\nexport default cartStore;"],"mappings":"AAAA,OAAOA,KAAK,IACRC,aAAa,EACbC,UAAU,EACVC,UAAU,EACVC,SAAS,QACN,OAAO;AACd,SACIC,kBAAkB,QACf,MAAM;AAEb,MAAMC,SAAS,CAAC;EACD;;EAEXC,WAAWA,CAAA,EAAG;IAAA,KAFdC,IAAI,GAAG,EAAE;IAGLH,kBAAkB,CAAC,IAAI,CAAC;EAC5B;EAEAI,SAASA,CAACC,OAAO,EAAE;IACf,MAAMC,cAAc,GAAG,IAAI,CAACC,WAAW,CAACF,OAAO,CAACG,EAAE,CAAC;IAEnD,IAAIF,cAAc,EAAE;MAChB;MACAA,cAAc,CAACG,QAAQ,IAAI,CAAC;IAChC,CAAC,MAAM;MACH;MACA,IAAI,CAACN,IAAI,CAACO,IAAI,CAAC;QACX,GAAGL,OAAO;QACVI,QAAQ,EAAE;MACd,CAAC,CAAC;IACN;EACJ;EAGAE,cAAcA,CAACN,OAAO,EAAE;IAEpB,IAAI,IAAI,CAACE,WAAW,CAACF,OAAO,CAACG,EAAE,CAAC,EAAE;MAC9B;MACAI,gBAAgB,CAACH,QAAQ,IAAI,CAAC;MAC9B,MAAMI,KAAK,GAAG,IAAI,CAACV,IAAI,CAACW,SAAS,CAAEC,IAAI,IAAKA,IAAI,CAACP,EAAE,KAAKQ,SAAS,CAAC;MAClE,IAAI,CAACb,IAAI,CAACc,MAAM,CAACJ,KAAK,EAAE,CAAC,CAAC;IAC9B;EACJ;EAEAN,WAAWA,CAACS,SAAS,EAAE;IACnB;IACA,MAAMV,cAAc,GAAG,IAAI,CAACH,IAAI,CAACe,IAAI,CAAEH,IAAI,IAAKA,IAAI,CAACP,EAAE,KAAKQ,SAAS,CAAC;IACtE,IAAIV,cAAc,EAAE;MAChB,OAAOA,cAAc;IACzB,CAAC,MAAM;MACH,OAAO,KAAK;IAChB;EACJ;EAEAa,WAAWA,CAACC,SAAS,EAAE;IACnB;IACA;IACA,OAAO,IAAI,CAACjB,IAAI,CAACkB,MAAM,CAAC,CAACC,KAAK,EAAEP,IAAI,KAAK;MACrC,IAAIA,IAAI,CAACK,SAAS,KAAKA,SAAS,EAAE;QAC9B,OAAOE,KAAK,GAAG,CAAC;MACpB;MACA,OAAOA,KAAK;IAChB,CAAC,EAAE,CAAC,CAAC;EACT;;EAEA;AACJ;;AAEA,MAAMC,SAAS,GAAG,IAAItB,SAAS,CAAC,CAAC;AAEjC,eAAesB,SAAS"},"metadata":{},"sourceType":"module","externalDependencies":[]}