{"ast":null,"code":"import { makeAutoObservable } from \"mobx\";\nconst TPS_VALUE = 0.05;\nconst TVQ_VALUE = 0.09975;\nclass CartStore {\n  // Tableau pour stocker les articles du panier\n\n  constructor() {\n    let currentCart = localStorage.getItem(\"Panier\");\n    if (currentCart === null) {\n      this._cart = [];\n    } else {\n      this._cart = JSON.parse(currentCart);\n    }\n    makeAutoObservable(this);\n  }\n  get cart() {\n    return this._cart;\n  }\n  set cart(cart) {\n    this._cart = cart;\n  }\n\n  //Sauvegarde le panier dans le localStorage\n  saveCart() {\n    localStorage.setItem(\"Panier\", JSON.stringify(this.cart));\n  }\n\n  //Ajoute un article dans le panier\n  addCart(article) {\n    let foundArticle = this.cart.find(item => item.id === article.id);\n    if (foundArticle !== undefined) {\n      foundArticle.quantity++;\n    } else {\n      article.quantity = 1;\n      this.cart.push(article);\n    }\n    this.saveCart();\n  }\n\n  //Retire un article du panier\n  removeFromCart(article) {\n    if (article.quantity > 1) {\n      article.quantity--;\n    } else {\n      article.quantity = 0;\n      this.cart = this.cart.filter(item => item.id !== article.id);\n    }\n    this.saveCart();\n  }\n  changeQuantity(article, quantity) {\n    let foundArticle = this.cart.find(item => item.id === article.id);\n    if (foundArticle !== undefined) {\n      foundArticle.quantity += quantity;\n      if (foundArticle.quantity <= 0) {\n        this.removeFromCart(foundArticle);\n      } else {\n        this.saveCart();\n      }\n    }\n  }\n\n  //Récupère le nombre total d'articles dans le panier\n  getNumberArticle() {\n    let number = 0;\n    for (let item of this.cart) {\n      number += item.quantity;\n    }\n    return number;\n  }\n\n  //Récupère le montant total du panier\n  getGrossCartTotal() {\n    let total = 0;\n    for (let item of this.cart) {\n      total += item.quantity * item.price;\n    }\n    return this.round(total);\n  }\n\n  //Calcul TPS\n  getTPS() {\n    let tps = this.getGrossCartTotal() * TPS_VALUE;\n    return this.round(tps);\n  }\n\n  //Calcul TVQ\n  getTVQ() {\n    let tvq = this.getGrossCartTotal() * TVQ_VALUE;\n    return this.round(tvq);\n  }\n\n  //Récupère le montant total du panier avec taxes\n  getCartTotalWithTaxes() {\n    let total = this.getGrossCartTotal() + this.getTPS() + this.getTVQ();\n    return this.round(total);\n  }\n\n  //Récupère la quantité d'un article présent dans le panier\n  getQuantityForArticle(article) {\n    const foundArticle = this.cart.find(item => item.id === article.id);\n    return foundArticle ? foundArticle.quantity : 0;\n  }\n\n  //Récupère le contenu du panier sous forme d'objet\n  getCartContents() {\n    const cartContents = [];\n    for (const item of this.cart) {\n      cartContents.push({\n        id: item._id,\n        name: item._name,\n        quantity: item._quantity,\n        price: item._price\n      });\n    }\n    return cartContents;\n  }\n\n  //Appliquer une réduction fixe\n  applyDiscount(number) {\n    return this.getCartTotalWithTaxes - number;\n  }\n\n  // Vide le localStorage\n  clearLocalStorage() {\n    localStorage.removeItem(\"Panier\");\n    for (const item of this.cart) {\n      if (item.quantity !== 0) {\n        item.quantity = 0;\n      }\n    }\n    this._cart = [];\n    this.saveCart();\n  }\n\n  //arrondir au centième\n  round(number) {\n    var _number$toString$spli;\n    const decimalCount = ((_number$toString$spli = number.toString().split('.')[1]) === null || _number$toString$spli === void 0 ? void 0 : _number$toString$spli.length) || 0;\n    if (decimalCount >= 3) {\n      number = parseFloat(number.toFixed(2));\n    }\n    return number;\n  }\n}\nexport default CartStore;","map":{"version":3,"names":["makeAutoObservable","TPS_VALUE","TVQ_VALUE","CartStore","constructor","currentCart","localStorage","getItem","_cart","JSON","parse","cart","saveCart","setItem","stringify","addCart","article","foundArticle","find","item","id","undefined","quantity","push","removeFromCart","filter","changeQuantity","getNumberArticle","number","getGrossCartTotal","total","price","round","getTPS","tps","getTVQ","tvq","getCartTotalWithTaxes","getQuantityForArticle","getCartContents","cartContents","_id","name","_name","_quantity","_price","applyDiscount","clearLocalStorage","removeItem","_number$toString$spli","decimalCount","toString","split","length","parseFloat","toFixed"],"sources":["C:/Nina/Projects/Pro/borne-interactive/src/store/CartStore.js"],"sourcesContent":["import { makeAutoObservable } from \"mobx\";\n\nconst TPS_VALUE = 0.05;\nconst TVQ_VALUE =  0.09975;\n\n\nclass CartStore {\n    _cart; // Tableau pour stocker les articles du panier\n\n    constructor() {\n        let currentCart = localStorage.getItem(\"Panier\");\n        if (currentCart === null) {\n            this._cart = [];\n        } else {\n            this._cart = JSON.parse(currentCart);\n        }\n\n        makeAutoObservable(this);\n    }\n\n    get cart() { return this._cart; }\n\n    set cart(cart) { this._cart = cart; }\n\n    //Sauvegarde le panier dans le localStorage\n    saveCart() {\n        localStorage.setItem(\"Panier\", JSON.stringify(this.cart));\n    }\n\n    //Ajoute un article dans le panier\n    addCart(article) {\n        let foundArticle = this.cart.find(item => item.id === article.id);\n        if (foundArticle !== undefined) {\n            foundArticle.quantity++;\n        } else {\n            article.quantity = 1;\n            this.cart.push(article);\n        }\n        this.saveCart();\n    }\n\n    //Retire un article du panier\n    removeFromCart(article) {\n        if (article.quantity > 1) {\n            article.quantity--;\n        } else {\n            article.quantity = 0;\n            this.cart = this.cart.filter(item => item.id !== article.id);\n        }\n        this.saveCart();\n    }\n\n    changeQuantity(article, quantity) {\n        let foundArticle = this.cart.find(item => item.id === article.id);\n        if (foundArticle !== undefined) {\n            foundArticle.quantity += quantity;\n            if (foundArticle.quantity <= 0) {\n                this.removeFromCart(foundArticle);\n            } else {\n                this.saveCart();\n            }\n        }\n    }\n\n    //Récupère le nombre total d'articles dans le panier\n    getNumberArticle() {\n        let number = 0;\n        for (let item of this.cart) {\n            number += item.quantity;\n        }\n        return number;\n    }\n\n    //Récupère le montant total du panier\n    getGrossCartTotal() {\n        let total = 0;\n        for (let item of this.cart) {\n            total += item.quantity * item.price;\n        }\n        return this.round(total);\n    }\n\n     //Calcul TPS\n     getTPS() {\n        let tps = this.getGrossCartTotal() * TPS_VALUE;\n        return this.round(tps);\n    }\n\n     //Calcul TVQ\n     getTVQ() {\n        let tvq = this.getGrossCartTotal() * TVQ_VALUE;\n        return this.round(tvq);\n    }\n\n     //Récupère le montant total du panier avec taxes\n     getCartTotalWithTaxes() {\n        let total = this.getGrossCartTotal() + this.getTPS() + this.getTVQ();\n        return this.round(total);\n    }\n\n    //Récupère la quantité d'un article présent dans le panier\n    getQuantityForArticle(article) {\n        const foundArticle = this.cart.find((item) => item.id === article.id);\n        return foundArticle ? foundArticle.quantity : 0;\n    }\n\n    //Récupère le contenu du panier sous forme d'objet\n    getCartContents() {\n        const cartContents = [];\n        for (const item of this.cart) {\n            cartContents.push({\n                id: item._id,\n                name: item._name,\n                quantity: item._quantity,\n                price: item._price\n            });\n        }\n        return cartContents;\n    }\n\n    //Appliquer une réduction fixe\n    applyDiscount(number) {\n        return this.getCartTotalWithTaxes - number;\n    }\n\n    // Vide le localStorage\n    clearLocalStorage() {\n        localStorage.removeItem(\"Panier\");\n        for (const item of this.cart) {\n            if (item.quantity !== 0) {item.quantity = 0}\n        }\n        this._cart = [];\n        this.saveCart();\n    }\n\n    //arrondir au centième\n    round(number) {\n        const decimalCount = number.toString().split('.')[1]?.length || 0;\n        if (decimalCount >= 3) {\n            number = parseFloat(number.toFixed(2)); \n        }\n\n        return number;\n    }\n\n}\n\nexport default CartStore;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}